version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2 
  aws-ecs: circleci/aws-ecs@3.2.0 
  aws-cli: circleci/aws-cli@3.1.1 

jobs:
  build:
    machine: true
    steps:
      - checkout
      - run:
          name: sudo docker-compose build
          command: sudo docker-compose build
  test:
    machine: true
    steps:
      - checkout
      - run:
          name: sudo docker-compose up -d
          command: sudo docker-compose up -d
      - run: sleep 10
      #backend test
      - run:
          name: docker-compose run api rails db:create RAILS_ENV=test
          command: sudo docker-compose run api rails db:create RAILS_ENV=test
      - run:
          name: docker-compose run api rails db:migrate RAILS_ENV=test
          command: sudo docker-compose run api rails db:migrate RAILS_ENV=test
      - run:
          name: docker-compose run api rails spec
          command: sudo docker-compose run api rails spec
      - run:
          name: docker-compose run front yarn install
          command: sudo docker-compose run front yarn install
      # frontend test
      - run:
          name: docker-compose run front yarn add -D jest
          command: docker-compose run front yarn add -D jest
      - run:
          name: docker-compose run front yarn test
          command: docker-compose run front yarn test
      - run:
          name: sudo docker-compose down
          command: sudo docker-compose down
          
workflows:
  build-and-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - aws-ecr/build-and-push-image:
          name: "build-and-push-backend"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: '${AWS_REGION}'
          repo: '${REPO_NAME_BACKEND}'
          path: './api'
          dockerfile: Dockerfile.prd
          filters:
            branches:
              only:
                - main          
      - aws-ecr/build-and-push-image:
          name: "build-and-push-frontend"
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: '${AWS_REGION}'
          repo: '${REPO_NAME_FRONTEND}'
          path: './front'
          dockerfile: Dockerfile.prd
          filters:
            branches:
              only:
                - main           
      - aws-ecs/deploy-service-update:
          family: "gog-back-ecs-task"
          cluster: "gog-ecs-cluster"
          service-name: "gog-back-ecs-service"
          container-image-name-updates: "container=${CONTAINER_BACK_NAME},tag=${CIRCLE_SHA1}"
          deployment-controller: "CODE_DEPLOY"
          codedeploy-application-name: "AppECS-gog-ecs-cluster-gog-back-service"
          codedeploy-deployment-group-name: "DgpECS-gog-ecs-cluster-gog-back-service"
          codedeploy-load-balanced-container-name: "gog-back-container"
          requires:
            - build-and-push-backend
          filters:
              branches:
                only:
                  - main
      - aws-ecs/deploy-service-update:
          family: "gog-front-ecs-task"
          cluster: "gog-ecs-cluster"
          service-name: "gog-front-ecs-service"
          container-image-name-updates: "container=${CONTAINER_FRONT_NAME},tag=${CIRCLE_SHA1}" 
          deployment-controller: "CODE_DEPLOY"
          codedeploy-application-name: "AppECS-gog-ecs-cluster-gog-front-service"
          codedeploy-deployment-group-name: "DgpECS-gog-ecs-cluster-gog-front-service"
          codedeploy-load-balanced-container-name: "gog-front-container"
          requires:
            - build-and-push-frontend
          filters:
              branches:
                only:
                  - main